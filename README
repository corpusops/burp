
DISCLAIMER - ABANDONED/UNMAINTAINED CODE / DO NOT USE
=======================================================
While this repository has been inactive for some time, this formal notice, issued on **December 10, 2024**, serves as the official declaration to clarify the situation. Consequently, this repository and all associated resources (including related projects, code, documentation, and distributed packages such as Docker images, PyPI packages, etc.) are now explicitly declared **unmaintained** and **abandoned**.

I would like to remind everyone that this project’s free license has always been based on the principle that the software is provided "AS-IS", without any warranty or expectation of liability or maintenance from the maintainer.
As such, it is used solely at the user's own risk, with no warranty or liability from the maintainer, including but not limited to any damages arising from its use.

Due to the enactment of the Cyber Resilience Act (EU Regulation 2024/2847), which significantly alters the regulatory framework, including penalties of up to €15M, combined with its demands for **unpaid** and **indefinite** liability, it has become untenable for me to continue maintaining all my Open Source Projects as a natural person.
The new regulations impose personal liability risks and create an unacceptable burden, regardless of my personal situation now or in the future, particularly when the work is done voluntarily and without compensation.

**No further technical support, updates (including security patches), or maintenance, of any kind, will be provided.**

These resources may remain online, but solely for public archiving, documentation, and educational purposes.

Users are strongly advised not to use these resources in any active or production-related projects, and to seek alternative solutions that comply with the new legal requirements (EU CRA).

**Using these resources outside of these contexts is strictly prohibited and is done at your own risk.**

This project has been transfered to Makina Corpus <freesoftware@makina-corpus.com> ( https://makina-corpus.com ). This project and its associated resources, including published resources related to this project (e.g., from PyPI, Docker Hub, GitHub, etc.), may be removed starting **March 15, 2025**, especially if the CRA’s risks remain disproportionate.

Quick start
-----------

The following assumes that you are installing the burp server from source.

You need to compile burp on a unix-based operating system first. Make sure
that you have openssl, zlib, librsync, and uthash libraries and development
packages installed.

 - Debian/Ubuntu:
	apt-get install make pkg-config check g++ \
		librsync-dev libz-dev libssl-dev uthash-dev

 - RHEL or CentOS 7:
	yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
	yum install make gcc gcc-c++ bzip2 pkgconfig \
		librsync-devel libzip-devel openssl-devel uthash-devel \
		libacl-devel ncurses-devel openssl-perl libcap-devel

 - RHEL or Centos 8:
	dnf install epel-release
	dnf --enablerepo=PowerTools list uthash-devel
	dnf install make gcc librsync-devel openssl-devel libacl-devel \
		ncurses-devel zlib-devel

After this point, make sure you are standing in the burp source directory. 

If you are taking the source directly from git:
	Install these extra packages with your distribution's package manager:
		autoconf automake libtool
		autoreconf -vif

Now run the configure script, noting that if you are using automake >= 1.16.1,
you may need to add '--disable-dependency-tracking':
	./configure --prefix=/usr --sysconfdir=/etc/burp --localstatedir=/var

Then run:
	make

All being well, burp will compile successfully. Install it as root:
	make install

Now install configuration files. Note that this will overwrite existing
configuration files in /etc/burp, so you will probably not want to run this if
you have an existing burp installation:
	make install-configs

Start the burp server:
	burp -c /etc/burp/burp-server.conf

By default, the server will fork into the background and run as a daemon. To
stay in the foreground, add the '-F' option. The first time that the server
runs, its startup will be a slower than usual because it needs to generate its
SSL certificates. However, this will probably only be noticeable on old
machines.

The server is now ready for clients to connect to it.


Unix client
-----------

If you are going to run the client on the same machine on which you installed
the server, the client will already be installed because the client is built
into the same binary (the behaviour of the binary depends upon the
configuration file that is given to it). Otherwise, you can either go through
the 'configure/make/make install' sequence on the client machine, or get burp
via your distribution's package manager.

The example client configuration file is /etc/burp/burp.conf.
It will backup /home by default.

You can either force a backup by hand:
	burp -a b

Or add a regular cron job like the following to /etc/cron.d/burp (or
equivalent). This makes the client ask the server every twenty minutes whether
it is yet time for a new backup. It is probably a good idea to change the
numbers for each client, in order to spread the load a bit:
MAILTO=
7,27,47 * * * * root    /usr/sbin/burp -a t

Whether or not an instance of the client results in an actual backup depends
upon the timer settings in the server config files.


Windows client
--------------

Pick the 32-bit or 64-bit Burp installer as appropriate - visit
http://burp.grke.org/ to find one of them.

If you need to compile one yourself, instructions can be found at
src/win32/README in the source package.

The Windows installer will ask you for the address of your server, the client
name, and the client password. Burp will then install its files to:
C:/Program Files/Burp
(Note that the "C:/Program Files/" part may differ, depending on Windows'
language settings).
If you need to change client configuration settings, the file can be found at:
C:/Program Files/Burp/burp.conf
It will be configured to backup "C:/Users", if it existed at installation
time, or otherwise "C:/Documents and Settings".

A Windows Scheduler task will have been installed and will be configured to
run every 20 minutes from the time of the installation. Whether or not this
results in an actual backup depends upon the timer settings in the server
config files.

To force a backup by hand, start the burp client from within its directory:
cd "C:\Program Files\Burp\bin"
burp.exe -a b
If you are running Windows 7, you might need to start the command prompt with
"Run as Administrator".


Mac client
----------

The installation on a Mac is performed via Homebrew (http://brew.sh).
After installing Homebrew, with an admin account you just have to open a
Terminal and type the command:
	brew install burp

Burp will be installed in the subdirectories of /usr/local (see Homebrew
website for details on the subdirectories).

You'll then have to edit the client configuration file:
/usr/local/etc/burp/burp.conf

At the minimum, you'll have to change the line:
include = /home
to something like:
include = /Users


Automated deploy with ansible
-----------------------------

For ansible roles to manage burp, please see:
https://github.com/grke/burp/wiki/automated-deploy-and-maintenance


For more help, see the man page - type 'man burp'.
